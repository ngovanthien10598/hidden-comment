{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["App","useState","source","setSource","position","setPosition","result","setResult","copyState","setCopyState","className","htmlFor","value","onSelect","event","target","selectionStart","onChange","name","id","rows","onClick","positionInt","parseInt","first","substring","last","length","middle","i","readOnly","text","onCopy","setTimeout","disabled","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iPAqFeA,MAhFf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEmBF,mBAAS,GAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGeJ,mBAAS,IAHxB,mBAGNK,EAHM,KAGEC,EAHF,OAIqBN,oBAAS,GAJ9B,mBAINO,EAJM,KAIKC,EAJL,KA8Cb,OACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,aACb,8CACA,6BACA,yBAAKA,UAAU,YACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,cACb,2BAAOA,UAAU,QAAQC,QAAQ,SAAjC,yDAAgGP,EAAhG,KACA,8BAAUM,UAAU,eAAeE,MAAOV,EAAQW,SAjDzC,SAAAC,GACnBT,EAAYS,EAAMC,OAAOC,iBAgD2DC,SA7C5D,SAAAH,GACxBX,EAAUW,EAAMC,OAAOH,QA4C0FM,KAAK,QAAQC,GAAG,QAAQC,KAAK,OAEtI,yBAAKV,UAAU,cACb,4BAAQA,UAAU,kBAAkBW,QA5C1B,SAAAP,GAkBpB,IAjBA,IAAMQ,EAAcC,SAASnB,GAIvBoB,EAAQtB,EAAOuB,UAAU,EAAGH,GAC5BI,EAAOxB,EAAOuB,UAAUH,EAAapB,EAAOyB,QAW9CC,EAAS,GACJC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,GAZgB,2lBAelBrB,EADeiB,EAAQI,EAASF,KAuBtB,gBAGJ,yBAAKhB,UAAU,YACb,yBAAKA,UAAU,cACb,2BAAOC,QAAQ,UAAf,UACA,8BAAUD,UAAU,eAAeE,MAAON,EAAQwB,UAAQ,EAACV,KAAK,OAElE,yBAAKV,UAAU,cACb,kBAAC,IAAD,CAAiBqB,KAAMzB,EAAQ0B,OA5BxB,WACjBvB,GAAa,GACbwB,YAAW,WACTxB,GAAa,KACZ,OAyBS,4BAAQyB,SAA4B,IAAlB5B,EAAOqB,OAAcjB,UAAU,mBAAmBF,EAAY,SAAW,OAA3F,qBAKR,6BACA,uBAAGE,UAAU,cAAa,+BAAO,0CAAe,uBAAGyB,KAAK,8CAA8CpB,OAAO,SAASqB,IAAI,uBAA1E,uBCnEpCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e7677434.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport CopyToClipboard from 'react-copy-to-clipboard';\r\n// import './bootstrap-grid.min.css';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [source, setSource] = useState(\"\");\r\n  const [position, setPosition] = useState(0);\r\n  const [result, setResult] = useState(\"\");\r\n  const [copyState, setCopyState] = useState(false);\r\n\r\n  const handleSelect = event => {\r\n    setPosition(event.target.selectionStart);\r\n  }\r\n\r\n  const handleInputChange = event => {\r\n    setSource(event.target.value);\r\n  }\r\n\r\n  const handleGetText = event => {\r\n    const positionInt = parseInt(position);\r\n    // if (positionInt === 0 || positionInt === source.length) {\r\n    //   return alert(\"Position must between the text\");\r\n    // }\r\n    const first = source.substring(0, positionInt);\r\n    const last = source.substring(positionInt, source.length);\r\n    const zeroWidth = \"\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\"\r\n                  + \"\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\"\r\n                  + \"\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\"\r\n                  + \"\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\"\r\n                  + \"\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\"\r\n                  + \"\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\"\r\n                  + \"\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\"\r\n                  + \"\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\"\r\n                  + \"\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\"\r\n                  + \"\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\\u200d\";\r\n    let middle = \"\";\r\n    for (let i = 0; i < 5; i++) {\r\n      middle += zeroWidth;\r\n    }\r\n    const result = first + middle + last;\r\n    setResult(result);\r\n  }\r\n\r\n  const handleCopy = () => {\r\n    setCopyState(true);\r\n    setTimeout(() => {\r\n      setCopyState(false);\r\n    }, 3000);\r\n  }\r\n\r\n  return (\r\n    <div className=\"wrapper pt-3\">\r\n      <div className=\"container\">\r\n        <h1>Hidden comment</h1>\r\n        <hr />\r\n        <div className=\"row py-3\">\r\n          <div className=\"col-md-6\">\r\n            <div className=\"form-group\">\r\n              <label className=\"label\" htmlFor=\"input\">Source (Click on text to set hide position - current: {position})</label>\r\n              <textarea className=\"form-control\" value={source} onSelect={handleSelect} onChange={handleInputChange} name=\"input\" id=\"input\" rows=\"3\"></textarea>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <button className=\"btn btn-primary\" onClick={handleGetText}>Get result</button>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"result\">Result</label>\r\n              <textarea className=\"form-control\" value={result} readOnly rows=\"3\"></textarea>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <CopyToClipboard text={result} onCopy={handleCopy}>\r\n                <button disabled={result.length === 0} className=\"btn btn-success\">{copyState ? 'Copied' : 'Copy'} to clipboard</button>\r\n              </CopyToClipboard>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <hr />\r\n        <p className=\"text-right\"><small><em>Created by <a href=\"https://www.facebook.com/ngovanthien1051998\" target=\"_blank\" rel=\"noopener noreferrer\">Thien Ngo Van</a></em></small></p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}